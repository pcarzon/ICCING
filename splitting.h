#ifndef Splitter_H
#define Splitter_H
//__________________________________________________________________________________________
//##########################################################################################
//  C++ Libraries
//##########################################################################################
#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <numeric>
//__________________________________________________________________________________________

//__________________________________________________________________________________________
//##########################################################################################
//  ICCING Header Files
//##########################################################################################
#include "global.h"
#include "functions.h"
#include "correlation.h"
//__________________________________________________________________________________________

using namespace std;

//__________________________________________________________________________________________
//##########################################################################################
//  Class Declarations
//##########################################################################################
class IO;
//__________________________________________________________________________________________

//__________________________________________________________________________________________
//##########################################################################################
//  Random Number Generator
//##########################################################################################
extern default_random_engine get_random_number;
//__________________________________________________________________________________________

class Splitter
{
private:

	//__________________________________________________________________________________________
  //##########################################################################################
  //  Splitter Parameters
  //##########################################################################################
	vector<vector<SplineSet>> flavor_chemistry;  //  flavor_chemistry[Qs(GeV)][quark_prob] quark_prob: 0 = Qs, 1 = up, 2 = down ...
	int charge_type;
	double alpha_s;
	double alpha_min;
	double r_max;
	double e_thresh;
	double lambda_;
	double grid_step;
	string test_;
	string output_dir;

	Correlator Model_Correlator = Correlator("", 0.0, 0.0);
	//__________________________________________________________________________________________

	//__________________________________________________________________________________________
  //##########################################################################################
  //  Internal Functions
  //##########################################################################################
	//  Select energy of gluon
  double RollGlue(double e_tot);

	//  Select flavor of gluon
	Charge RollFlavor(double Qs);

	//  Sample location and momentum fraction of quark pair
	vector<double> RollLocation(double mass, double Qs);

	//  Splitter Copy Function
	void CopySplitter(const Splitter &e);
	//__________________________________________________________________________________________

public:

	//__________________________________________________________________________________________
  //##########################################################################################
  //  Basic Class Functions
  //##########################################################################################
  Splitter();	 // Class Constructor
  ~Splitter();	//  Class Destructor

  Splitter(const Splitter &original);	//  Implicit copy function, newIOObject(oldIOObject)
  Splitter& operator=(const Splitter& original);  //  Defines what happens when you use = operator on class
	//__________________________________________________________________________________________

	//__________________________________________________________________________________________
  //##########################################################################################
  //  Splitter Specific Functions
  //##########################################################################################
	//  Process energy from Event and create gluon or quark pairs
  Quarks SplitSample(Sample sampled_energy);
	//__________________________________________________________________________________________

	//__________________________________________________________________________________________
  //##########################################################################################
  //  Friend Classes
  //##########################################################################################
  //  IO class can access private variables of Splitter class
	friend class IO;
	//__________________________________________________________________________________________
};
#endif
